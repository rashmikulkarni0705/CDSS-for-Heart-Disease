package ID3UI;

import AlgoID3.BarChartGraph;
import AlgoID3.ESTreeAlgo;
import AlgoID3.ID3Algo;
//import Algo.LibSVMTrain;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

//import LMC.classification.bayes.InstencelNaiveBayes;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;

public class Graph extends javax.swing.JInternalFrame {

    public static Graph obj = null;

    /**
     * Creates new form Training
     */
    public Graph() {
        obj = this;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Graph");

        jButton2.setText("START");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("CLOSE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Accuracy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Sensitivity");
        jButton4.setActionCommand("Sensitivity Average");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Time");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Precion");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("specificity");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Recall");
        jButton8.setActionCommand("Sensitivity Average");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("F Measurement");
        jButton9.setActionCommand("Sensitivity Average");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            new Thread() {

                @Override
                public void run() {
                    try {

                        jProgressBar1.setIndeterminate(true);
                        jTextArea1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        jTextArea1.setText("");

                        PrintStream oldOut = System.out;
                        PrintStream oldErr = System.err;

                        PrintStream printStream
                                = new PrintStream(new TextAreaOutputStream(jTextArea1), true);

                        System.setOut(printStream);
                        System.setErr(printStream);
//                        Dia.dataSet ds = new dataSet();
//                        ds.speraateFile("Train/svm.txt", 70, 30);
//                        svm_train.main(new String[]{"Train/svm.txt"});
//                        model = svm_train.model1;
                        Date dt = new Date();
                        System.out.println("Training starting.........");
//                        if (jComboBox1.getSelectedIndex() == 0) {
//                            ID3Algo.train(jComboBox2.getSelectedItem().toString(), 13);
//                        } else {
//                            ESTreeAlgo.train(jComboBox2.getSelectedItem().toString(), 13);
//                        }

                        FileWriter fr = new FileWriter("acc.txt");
                        FileWriter fr1 = new FileWriter("f1.txt");
                        FileWriter fr2 = new FileWriter("time.txt");
                        FileWriter fr3 = new FileWriter("precion.txt");
                        FileWriter fr4 = new FileWriter("sensitivity.txt");
                        FileWriter fr5 = new FileWriter("specificity.txt");
                        FileWriter fr6= new FileWriter("fMeasurement.txt");
                         
                        String db[] = new String[]{"processed.cleveland.data", "statlog_heart.dat","PoonaData.data"};
                        for (int i = 0; i < db.length; i++) {
                            Date dt1 = new Date();
                            ID3Algo.train(db[i], 13);
                            ID3Algo.test("id3.csv", 13);
                            fr.write(db[i] + "," + ID3Algo.cf.accuracy_AVG + "," + "ID3\n");
                            fr1.write(db[i] + "," + ID3Algo.cf.F1score_AVG + "," + "ID3\n");
                            fr2.write(db[i] + "," + (new Date().getTime() - dt1.getTime()) + "," + "ID3\n");
                            fr3.write(db[i] + "," + ID3Algo.cf.precision_AVG + "," + "ID3\n");
                            fr4.write(db[i] + "," + ID3Algo.cf.TPR_AVG + "," + "ID3\n");
                            fr5.write(db[i] + "," + ID3Algo.cf.TNR_AVG + "," + "ID3\n");
                            fr6.write(db[i] + "," + ID3Algo.cf.F1score_AVG + "," + "ID3\n"); 
                             
                            dt1 = new Date();
                            ESTreeAlgo.train(db[i], 13);
                            ESTreeAlgo.test("id3.csv", 13);
                            fr.write(db[i] + "," + ESTreeAlgo.cf.accuracy_AVG + "," + "ESTTree\n");
                            fr1.write(db[i] + "," + ESTreeAlgo.cf.F1score_AVG + "," + "ESTTree\n");
                            fr2.write(db[i] + "," + (new Date().getTime() - dt1.getTime()) + "," + "ESTTree\n");
                            fr3.write(db[i] + "," + ESTreeAlgo.cf.precision_AVG + "," + "ESTTree\n");
                            fr4.write(db[i] + "," + ESTreeAlgo.cf.TPR_AVG + "," + "ESTTree\n");
                            fr5.write(db[i] + "," + ESTreeAlgo.cf.TNR_AVG + "," + "ESTTree\n");
                            fr6.write(db[i] + "," + ESTreeAlgo.cf.F1score_AVG + "," + "ESTTree\n");
                            
                        }
                        fr.close();
                        fr1.close();
                        fr2.close();
                        fr3.close();
                        fr4.close();
                        fr5.close();
                        fr6.close();
                        
                        System.out.println("Training Completed.........");
                        System.out.println("Time ........." + (new Date().getTime() - dt.getTime()) + " ms");
                        printStream.flush();
                        // Restore the old System's out and err streams.
                        System.setOut(oldOut);
                        System.setErr(oldErr);
                        jProgressBar1.setIndeterminate(false);
                        jTextArea1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        JOptionPane.showMessageDialog(obj, "training completed");

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }.start();

        } catch (Exception ex) {
            Logger.getLogger(Graph.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        {
            ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("acc.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("Accurcy", "%", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        {
            ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("sensitivity.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("Sensitivity", "Values", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        {
            ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("time.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("Time", "MiliSecond", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
            ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("precion.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("Precion", "Values", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
            ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("specificity.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("specificity", "Values", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
          ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("specificity.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("specificity", "Values", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
         ArrayList xtable = new ArrayList();

            ArrayList series = new ArrayList();

            ArrayList<ArrayList> al = new ArrayList();

            try {
                // Open the file that is the first 
                // command line parameter
                FileInputStream fstream = new FileInputStream("fMeasurement.txt");
                // Get the object of DataInputStream
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null) {
                    // Print the content on the console
                    StringTokenizer st = new StringTokenizer(strLine, ",");
                    String keyword = "";
                    String pre = "";
                    String xseris = "";
                    if (st.countTokens() >= 3) {
                        xseris = st.nextToken();
                        pre = st.nextToken();
                        keyword = st.nextToken();
                        if (xtable.indexOf(keyword) == -1) {
                            xtable.add(keyword);
                        }
                        if (series.indexOf(xseris) == -1) {
                            series.add(xseris);
                        }
                        if (xtable.indexOf(keyword) >= al.size()) {
                            al.add(new ArrayList());
                        }
                        al.get(xtable.indexOf(keyword)).add(new Double(pre));
                    }
                    System.out.println(strLine);
                }
                //Close the input stream
                in.close();
            } catch (Exception e) {//Catch exception if any
                System.err.println("Error: " + e.getMessage());
            }

            BarChartGraph demo = new BarChartGraph("f Measurement", "Values", "Dataset", al, series, xtable);

            demo.pack();

            demo.setVisible(
                    true);
        
    }//GEN-LAST:event_jButton9ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
